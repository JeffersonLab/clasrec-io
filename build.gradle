plugins {
    id 'java'
    id 'maven'

    id 'checkstyle'
    id 'findbugs'

    id 'eclipse'
    id 'idea'
}


group = 'org.jlab.clas'
archivesBaseName = 'clasrec-io'
version = '0.10-SNAPSHOT'

defaultTasks 'build'

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

configurations {
    testCompile.extendsFrom compileOnly
    deployerJars
}


repositories {
    maven {
        url 'https://clasweb.jlab.org/jhep/maven/'
    }
    maven {
        url 'https://clasweb.jlab.org/clas12maven/'
    }
    mavenCentral()
}


dependencies {
    compileOnly 'org.jlab.coda:jclara:4.3-SNAPSHOT'
    compile 'org.jlab.jnp:jnp-hipo:1.0-SNAPSHOT'
    compile 'org.jlab.coda:jevio:6.0-SNAPSHOT'
    compile 'org.json:json:20160810'
    compileOnly 'com.google.code.findbugs:findbugs-annotations:3.0.1'
    deployerJars 'org.apache.maven.wagon:wagon-ssh-external:2.12'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:2.7.11'
}


javadoc {
    options.charSet = 'utf8'
    options.encoding = 'utf8'
    options.docEncoding = 'utf8'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


artifacts {
    archives javadocJar
    archives sourcesJar
}


uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: 'scpexe://ifarm65.jlab.org/group/clas/www/clasweb/html/clas12maven') {
                authentication(userName: 'clas12')
            }
        }
    }
}


test {
    testLogging {
        exceptionFormat = 'full'
    }
}


def deploySpec = copySpec {
    into ('plugins/clas12/lib/clas') {
        from configurations.runtime
    }
    into ('plugins/clas12/lib/services') {
        from jar.archivePath
    }
}


task deploy(type: Copy, overwrite: true, dependsOn: jar) {
    def dest = "$System.env.CLARA_HOME"

    into dest
    with deploySpec

    doFirst {
        if (dest == 'null') {
            throw new GradleException('CLARA_HOME not set')
        }
    }
}



checkstyle {
    toolVersion = '8.0'
    configFile = file('config/quality/checkstyle.xml')
}

findbugs {
    toolVersion = '3.0.1'
    effort = 'max'
    reportLevel = 'medium'
    excludeFilter = file('config/quality/findbugs-exclude.xml')
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// Marker task to enable findbugs.
task findbugs(
    group: 'Verification',
    description: 'Marker task to enabled findbugs.'
)

gradle.taskGraph.whenReady { taskGraph ->
    tasks.findbugsMain.onlyIf {
        taskGraph.hasTask((tasks.findbugs))
    }
    tasks.findbugsTest.onlyIf {
        taskGraph.hasTask((tasks.findbugs))
    }
}



eclipse {
    classpath {
        defaultOutputDir = file("${buildDir}/eclipse-classes")
    }
}
