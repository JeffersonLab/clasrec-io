apply plugin: 'java'
apply plugin: 'maven'

apply plugin: 'checkstyle'
apply plugin: 'findbugs'

apply plugin: 'eclipse'
apply plugin: 'idea'


group = 'org.jlab.clas'
archivesBaseName = 'clasrec-io'
version = '0.8-SNAPSHOT'

defaultTasks 'build'


compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}


configurations {
    provided
    compile.extendsFrom provided
}


repositories {
    mavenLocal()
    maven {
        url 'http://clasweb.jlab.org/clas12maven/'
    }
    mavenCentral()
}


dependencies {
    provided 'org.jlab.coda:jclara:4.3-SNAPSHOT'
    compile 'org.jlab.coda:jevio:4.4.6'
    compile 'org.json:json:20160212'
    compile 'org.apache.commons:commons-exec:1.3'
    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:1.+'
}


javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}


task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


artifacts {
    archives javadocJar
    archives sourcesJar
}


if (!hasProperty('localPublicationRepo')) {
    ext.localPublicationRepo = 'file://localhost/tmp/repo'
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: localPublicationRepo)
        }
    }
}


task distSources(type: Tar, dependsOn: build) {
    extension = 'tar.gz'
    classifier = 'src'
    compression = Compression.GZIP

    into "${baseName}-${version}-${classifier}"

    from 'build.gradle'
    from ('config') {
        into 'config'
    }
    from ('src') {
        into 'src'
    }
}


def deploySpec = copySpec {
    into ('lib') {
        from configurations.runtime - configurations.provided
    }
    into ('services') {
        from jar.archivePath
    }
}


task deploy(type: Copy, dependsOn: jar) {
    def dest = "$System.env.CLARA_HOME/plugins/clas12"

    into dest
    with deploySpec

    doFirst {
        if (System.env.CLARA_HOME == null) {
            throw new GradleException('CLARA_HOME not set')
        }
    }
}



checkstyle {
    toolVersion = '6.14'
    configFile = file('config/quality/checkstyle.xml')
    configProperties['samedir'] = file('config/quality')
}

findbugs {
    toolVersion = '3.0.1'
    ignoreFailures = true
    effort = 'default'
    reportLevel = 'medium'
    excludeFilter = file('config/quality/findbugs-exclude.xml')
}

task checkstyleHtml << {
    ant.xslt(in: checkstyleMain.reports.xml.destination,
             style: file('config/quality/checkstyle-noframes-sorted.xsl'),
             out: file("${checkstyleMain.reports.xml.destination.parent}/main.html"))
}

checkstyleMain.finalizedBy checkstyleHtml

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// Marker task to enable findbugs.
task findbugs(
    group: 'Verification',
    description: 'Marker task to enabled findbugs.'
)

gradle.taskGraph.whenReady { taskGraph ->
    tasks.findbugsMain.onlyIf {
        taskGraph.hasTask((tasks.findbugs))
    }
    tasks.findbugsTest.onlyIf {
        taskGraph.hasTask((tasks.findbugs))
    }
}



eclipse {
    classpath {
        defaultOutputDir = file("${buildDir}/eclipse-classes")
    }
}
